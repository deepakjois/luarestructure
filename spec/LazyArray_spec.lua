local r = require("restructure")
local LazyArray = require("restructure.LazyArray")
describe('LazyArray', function()
  describe('decode', function()
    it('should decode items lazily', function()
      local stream = r.DecodeStream.new(string.char(1, 2, 3, 4, 5))
      local array = LazyArray.new(r.uint8, 4)

      local arr = array:decode(stream)
      assert.are_equal(1, arr:get(0))
      assert.are_equal(2, arr:get(1))
      assert.are_equal(3, arr:get(2))
      assert.are_equal(4, arr:get(3))

      assert.is_nil(arr:get(-1))
      assert.is_nil(arr:get(5))
    end)

    it('should be able to convert to an array', function()
      local stream = r.DecodeStream.new(string.char(1, 2, 3, 4, 5))
      local array = LazyArray.new(r.uint8, 4)

      local arr = array:decode(stream)
      assert.are.same({1, 2, 3, 4}, arr:toArray())
    end)

    it('should decode length as number before array', function()
      local stream = r.DecodeStream.new(string.char(4, 1, 2, 3, 4, 5))
      local array = LazyArray.new(r.uint8, r.uint8)
      local arr = array:decode(stream)

      assert.are.same({1, 2, 3, 4}, arr:toArray())
    end)
  end)

  describe('size', function()
    it('should work with LazyArrays', function()
      local stream = r.DecodeStream.new(string.char(1, 2, 3, 4, 5))
      local array = LazyArray.new(r.uint8, 4)
      local arr = array:decode(stream)
      assert.are_equal(4, array:size(arr))
    end)
  end)

  describe('encode', function()
    it('should work with LazyArrays', function()
      local stream = r.DecodeStream.new(string.char(1, 2, 3, 4, 5))
      local array = LazyArray.new(r.uint8, 4)
      local arr = array:decode(stream)

      local enc = r.EncodeStream.new()
      array:encode(enc, arr)
      assert.are_equal(string.char(1, 2, 3, 4), enc:getContents())
    end)
  end)
end)
