local r = require('restructure')

describe('Bitfield', function()
  local bitfield = r.Bitfield.new(r.uint8, {'Jack', 'Kack', 'Lack', 'Mack', 'Nack', 'Oack', 'Pack', 'Quack'})
  local JACK  = bit32.lshift(1, 0)
  -- local KACK  = bit32.lshift(1, 1)
  -- local LACK  = bit32.lshift(1, 2)
  local MACK  = bit32.lshift(1, 3)
  local NACK  = bit32.lshift(1, 4)
  -- local OACK  = bit32.lshift(1, 5)
  local PACK  = bit32.lshift(1, 6)
  local QUACK = bit32.lshift(1, 7)

  it('should have the right size', function()
    assert.are_equal(1, bitfield:size())
  end)

  it('should decode', function()
    local stream = r.DecodeStream.new(string.char(bit32.bor(JACK, MACK, PACK, NACK, QUACK)))
    local v = bitfield:decode(stream)
    assert.are.same({Jack= true, Kack= false, Lack= false, Mack= true, Nack= true, Oack= false, Pack= true, Quack= true}, v)
  end)

  it('should encode', function()
    local stream = r.EncodeStream.new()
    bitfield:encode(stream, { Jack= true, Kack= false, Lack= false, Mack= true, Nack= true, Oack= false, Pack= true, Quack= true})
    assert.are_equal(string.char(bit32.bor(JACK, MACK, PACK, NACK, QUACK)), stream:getContents())
  end)
end)
