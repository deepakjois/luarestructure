local r = require('restructure')

describe('Optional', function()
  describe('decode', function()
    it('should not decode when condition is falsy', function()
      local stream = r.DecodeStream.new(string.char(0))
      local optional = r.Optional.new(r.uint8, false)
      assert.is_nil(optional:decode(stream))
    end)

    it('should not decode when condition is a function and falsy', function()
      local stream = r.DecodeStream.new(string.char(0))
      local optional = r.Optional.new(r.uint8, function() return false end)
      assert.is_nil(optional:decode(stream))
    end)

    it('should decode when condition is omitted', function()
      local stream = r.DecodeStream.new(string.char(0))
      local optional = r.Optional.new(r.uint8)
      assert.is_not_nil(optional:decode(stream))
    end)

    it('should decode when condition is truthy', function()
      local stream = r.DecodeStream.new(string.char(0))
      local optional = r.Optional.new(r.uint8, true)
      assert.is_not_nil(optional:decode(stream))
    end)

    it('should decode when condition is a function and truthy', function()
      local stream = r.DecodeStream.new(string.char(0))
      local optional = r.Optional.new(r.uint8, function() return true end)
      assert.is_not_nil(optional:decode(stream))
    end)
  end)

  describe('size', function()
    it('should return 0 when condition is falsy', function()
      local optional = r.Optional.new(r.uint8, false)
      assert.are_equal(0, optional:size())
    end)

    it('should return 0 when condition is a function and falsy', function()
      local optional = r.Optional.new(r.uint8, function() return false end)
      assert.are_equal(0, optional:size())
    end)

    it('should return given type size when condition is omitted', function()
      local optional = r.Optional.new(r.uint8)
      assert.are_equal(1, optional:size())
    end)

    it('should return given type size when condition is truthy', function()
      local optional = r.Optional.new(r.uint8, true)
      assert.are_equal(1, optional:size())
    end)

    it('should return given type size when condition is a function and truthy', function()
      local optional = r.Optional.new(r.uint8, function() return true end)
      assert.are_equal(1, optional:size())
    end)
  end)
  --
  describe('encode', function()
    it('should not encode when condition is falsy', function()
      local stream = r.EncodeStream.new()
      local optional = r.Optional.new(r.uint8, false)
      optional:encode(stream, 128)
      assert.are_equal("", stream:getContents())
    end)

    it('should not encode when condition is a function and falsy', function()
      local stream = r.EncodeStream.new()
      local optional = r.Optional.new(r.uint8, function() return false end)
      optional:encode(stream, 128)
      assert.are_equal("", stream:getContents())
    end)

    it('should encode when condition is omitted', function()
      local stream = r.EncodeStream.new()
      local optional = r.Optional.new(r.uint8)
      optional:encode(stream, 128)
      assert.are_equal(string.char(128), stream:getContents())
    end)

    it('should encode when condition is truthy', function()
      local stream = r.EncodeStream.new()
      local optional = r.Optional.new(r.uint8, true)
      optional:encode(stream, 128)
      assert.are_equal(string.char(128), stream:getContents())
    end)

    it('should encode when condition is a function and truthy', function()
      local stream = r.EncodeStream.new()
      local optional = r.Optional.new(r.uint8, function() return true end)
      optional:encode(stream, 128)
      assert.are_equal(string.char(128), stream:getContents())
    end)
  end)
end)